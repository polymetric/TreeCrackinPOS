package TreeCrackinPOS.tests;

import TreeCrackinPOS.utils.RandomOverride;
import kaptainwutax.seedutils.lcg.LCG;

import static TreeCrackinPOS.tests.ApeBrainNanotimeFinder.*;

public class ApeBrainNextLongReversal {
    public static void main(String[] args) throws Exception {
        long seed = 1;
        RandomOverride rand = new RandomOverride();
        rand.setSeed(seed ^ LCG.JAVA.multiplier);

        System.out.println("nextLong:");
        long nextLong = rand.nextLong();
        System.out.println(Long.toBinaryString(nextLong >>> 32 & MASK32));
        System.out.println(Long.toBinaryString(nextLong & MASK32));
        System.out.println();

        System.out.println("emulation 1:");
        long lower = ((seed = LCG.JAVA.nextSeed(seed)) >>> 16) & MASK32;
        long upper = ((seed = LCG.JAVA.nextSeed(seed)) >>> 16) & MASK32;
        System.out.println(lower);
        System.out.println(upper);
        System.out.println();

        System.out.println("emulation 2:");
        seed = 1;
        lower = (seed = LCG.JAVA.nextSeed(seed)) & MASK48;
        upper = (seed = LCG.JAVA.nextSeed(seed)) & MASK48;
        System.out.println(lower>>>16);
        System.out.println(upper>>>16);

        System.exit(0);

        System.out.println(nextLongReversal(1652478925949069L));

        System.exit(0);

        for (int i = 0; i <= Integer.MAX_VALUE; i++) {
            try {
                nextLongReversal(i);
                // if we make it here without throwing an exception,
                // i can be generated by nextLong
                System.out.printf("%19d can be generated with any nanotime mod %19d", i, getNanoTimeMod48FromSeed48(i, 0));
            } catch (Exception e) { }
        }
    }

    private static final LCG rev1 = LCG.JAVA.combine(-1);
    private static final LCG rev2= LCG.JAVA.combine(-2);
    private static final long MASK32 = ((1L << 32) - 1);
    private static final long MASK48 = ((1L << 48) - 1);

    public static long nextLongReversal(long value) throws Exception {
        long seedUpper32 = (value >> 32) & MASK32;
        long seedLower32 = value & MASK32;
        long testSeed;
        for (int i = 0; i < (1 << 16); i++) {
            testSeed = (seedLower32 << 16) | i;
            if (rev1.nextSeed(testSeed) >>> 16 == seedUpper32) {
                return rev2.nextSeed(testSeed);
            }
            if (rev1.nextSeed(testSeed) >>> 16 == seedUpper32+1) {
                return rev2.nextSeed(testSeed);
            }
        }
        throw new Exception("this long cannot be generated with nextLong");
    }
}
