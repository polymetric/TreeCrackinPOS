/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TreeCrackinPOS;

import TreeCrackinPOS.utils.RandomOverride;

public class KernelPrototype {
    // main kernel prototype
    public static void main(String[] args) {
        final int TREE_COUNT = 7;
        final int TREE_GEN_AMT = 11;

        int[][] trees = {
                {   1,   1 },
                {   2,   8 },
                {  15,  10 },
                {  12,   2 },
                {   7,   3 },
                {   3,   4 },
                {   0,  12 },
        };

        char[] treeTypes = {
                'o',
                'o',
                'o',
                'b',
                'o',
                'b',
                'o',
        };

        int[] treeHeights = {
                5,
                4,
                5,
                5,
                6,
                6,
                4,
        };

        char[][] treeLeaves = {
                { 'l', 'n', 'n', 'u', 'n', 'l', 'l', 'u', 'l', 'l', 'n', 'u', },
                { 'n', 'n', 'l', 'l', 'l', 'n', 'n', 'l', 'n', 'n', 'n', 'l', },
                { 'n', 'l', 'l', 'l', 'n', 'n', 'l', 'l', 'l', 'n', 'n', 'l', },
                { 'l', 'n', 'l', 'n', 'u', 'l', 'n', 'n', 'l', 'n', 'n', 'l', },
                { 'l', 'l', 'u', 'u', 'l', 'l', 'u', 'u', 'l', 'u', 'u', 'u', },
                { 'u', 'l', 'u', 'l', 'u', 'n', 'u', 'n', 'l', 'l', 'u', 'u', },
                { 'u', 'n', 'u', 'l', 'u', 'n', 'u', 'n', 'l', 'n', 'n', 'l', },
        };

        int[] sureLeaves = {
                9,
                12,
                12,
                11,
                5,
                6,
                8,
        };

        char[] gennedLeaves = new char[12];

        RandomOverride rand = new RandomOverride();
        long treeSeedStart = 0L;
        long treeSeedEnd = (1L << 48) - 1;

        System.out.println("started at " + System.currentTimeMillis());
        for (long treeSeed = treeSeedStart; treeSeed < treeSeedEnd; treeSeed++) {
            rand.setSeedDirect(treeSeed);
            int baseX = rand.nextInt(16);
            int baseZ = rand.nextInt(16);
            char type = 'o';
            if (rand.nextInt(5) == 0) {
                type = 'b';
            } else if (rand.nextInt(10) == 0) {
                type = 'B';
            }
            if (type != 'B') {
                int trunkHeight = rand.nextInt(3) + 4;
                for (int leaf = 0; leaf < 12; leaf++) {
                    gennedLeaves[leaf] = rand.nextInt(2) != 0 ? 'l' : 'n';
                }
                for (int targetTree = 0; targetTree < TREE_COUNT; targetTree++) {
                    if (baseX == trees[targetTree][0]
                            && baseZ == trees[targetTree][1]
                            && trunkHeight == treeHeights[targetTree]
                            && type == treeTypes[targetTree]
                    ) {
                        int leafMatches = 0;
                        for (int leaf = 0; leaf < 12; leaf++) {
                            if (treeLeaves[targetTree][leaf] == gennedLeaves[leaf]) {
                                leafMatches++;
                            }
                        }
                        if (leafMatches == sureLeaves[targetTree]) {
                            System.out.printf("found match for tree %d: seed: %d\n", targetTree, treeSeed);
                        }
                    }
                }
            } else {

            }
            // prints seed every time the progress increases by 1/10000 of the seedspace
//          if (treeSeed % 28147497671L == 0) {
//            if (treeSeed % 281474976L == 0) {
//                System.out.printf("current seed: %d\n", treeSeed);
//            }
        }
    }
}
